rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles[role] == true;
    }
    
    function isAdminOrScorer() {
      return hasRole('admin') || hasRole('scorer');
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && 
                      (!('roles' in request.resource.data) || 
                       request.resource.data.roles == resource.data.roles ||
                       hasRole('admin'));
    }

    // Players collection
    match /players/{playerId} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrScorer() &&
                       request.resource.data.keys().hasAll(['name', 'stats', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy']) &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.updatedBy == request.auth.uid &&
                       request.resource.data.stats.keys().hasAll([
                         'matchesPlayed', 'wins', 'losses', 'framesWon', 'framesLost',
                         'highestBreak', 'breaks50plus', 'breaks100plus', 'avgPointsPerFrame', 'elo'
                       ]);
      allow update: if isAdminOrScorer() &&
                       request.resource.data.updatedBy == request.auth.uid &&
                       request.resource.data.createdBy == resource.data.createdBy &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       // Prevent direct stats manipulation from client
                       request.resource.data.stats == resource.data.stats;
    }

    // Matches collection
    match /matches/{matchId} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrScorer() &&
                       request.resource.data.keys().hasAll(['status', 'format', 'players', 'current', 'score', 'history', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy']) &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.updatedBy == request.auth.uid &&
                       request.resource.data.status in ['scheduled', 'live'] &&
                       request.resource.data.players.size() == 2;
      allow update: if isAdminOrScorer() &&
                       request.resource.data.updatedBy == request.auth.uid &&
                       request.resource.data.createdBy == resource.data.createdBy &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       // Only allow status transitions and field updates, not direct manipulation
                       (request.resource.data.status in ['scheduled', 'live', 'completed', 'abandoned']);
    }

    // Leaderboards collection (read-only for clients)
    match /leaderboards/{leaderboardId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only functions can write
    }

    // Storage rules for player avatars
    match /players/{playerId}/avatar {
      allow read: if true;
      allow write: if isAuthenticated() && hasRole('admin');
    }
  }
}